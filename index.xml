<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prashant Bhardwaj</title>
    <link>/</link>
    <description>Recent content on Prashant Bhardwaj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>copyright@Prashant</copyright>
    <lastBuildDate>Sat, 24 Dec 2022 23:18:23 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka Streams - WIP</title>
      <link>/posts/kafka-streams-wip/</link>
      <pubDate>Sat, 24 Dec 2022 23:18:23 +0000</pubDate>
      
      <guid>/posts/kafka-streams-wip/</guid>
      <description>Stream is unbound flow of data (call it message, event or log).
  The Streams API of Apache Kafka¬Æ, available through a Java library, can be used to build highly scalable, elastic, fault-tolerant, distributed applications and microservices. First and foremost, the Kafka Streams API allows you to create real-time applications that power your core business. It is the easiest yet the most powerful technology to process data stored in Kafka.</description>
    </item>
    
    <item>
      <title>Introduction: AWS Certified Solutions Architect - Associate (WIP)</title>
      <link>/posts/introduction-aws-certified-solutions-architect-associate-wip/</link>
      <pubDate>Sun, 16 Oct 2022 21:19:45 +0100</pubDate>
      
      <guid>/posts/introduction-aws-certified-solutions-architect-associate-wip/</guid>
      <description>Exam structure  There are 65 questions within the exam and are multiple-choice requiring you to select either a single or multiple answers for each question The scoring is based out of 1000, with a minimum passing score of 720 (72%) You get 130 minutes to answer these questions.  The exam is split into 4 different domains that you will be assessed against, each carrying a different percentage weighting, these are identified as:</description>
    </item>
    
    <item>
      <title>Microservices : Decomposition Strategies</title>
      <link>/posts/microservices-decomposition-strategies/</link>
      <pubDate>Mon, 03 Oct 2022 21:45:21 +0100</pubDate>
      
      <guid>/posts/microservices-decomposition-strategies/</guid>
      <description>Main idea behind Microservices pattern is to construct an application by developing interconnected smaller services.
Decomposition of an application into smaller services facilitates two things:
 Division of labor and knowledge Loose coupling of interactions  </description>
    </item>
    
    <item>
      <title>Microservices : Introduction</title>
      <link>/posts/microservices-introduction/</link>
      <pubDate>Mon, 03 Oct 2022 11:39:12 +0100</pubDate>
      
      <guid>/posts/microservices-introduction/</guid>
      <description>Microservice pattern is an architecture that functionally decomposes an application into a set of services. It doesn&amp;rsquo;t say anything about size. Each service has focused, cohesive set of responsibility.
 Characterstics of Microservice architecture  X, Y and Z-Axis Scalability of micro services (Michael Fisher&amp;rsquo;s book - The Art of Scalability (Addison-Wesley, 2015) - Scale cube) Microservices as a form of modularity Each service has its own database  How is this different from Service oriented architecture (SOA)?</description>
    </item>
    
    <item>
      <title>Monolith Architecture</title>
      <link>/posts/monolith-architecture/</link>
      <pubDate>Sun, 02 Oct 2022 21:42:56 +0100</pubDate>
      
      <guid>/posts/monolith-architecture/</guid>
      <description>Benefits of Monolith architecture  Simple to develop Easy to make radical changes Strightforward to test Strightforward to deploy Easy to scale  Issues with Monolith architecture  Development is Slow Path from commit to deployment is long and aduous Scaling is difficult delivering a reliable monolith is challenging locked into increasingly obslete technology stack  </description>
    </item>
    
    <item>
      <title>Software Architecture</title>
      <link>/posts/software-architecture/</link>
      <pubDate>Sat, 01 Oct 2022 22:37:40 +0100</pubDate>
      
      <guid>/posts/software-architecture/</guid>
      <description>Any software architecture of a computing system is the set of working components and relationsship between them. Exaple: Database, Message Broker, Server and an application running on that server.
 The 4+1 View Model Of Software Architecture More concretely, an application‚Äôs architecture can be viewed from multiple perspectives.
 üìö Phillip Krutchen: ‚ÄúArchitectural Blueprints‚ÄîThe ‚Äò4+1‚Äô View Model of Software Architecture‚Äù
  üîî A good architecture never enables you to satisfy your functional requirement, however it helps you to achieve the quality of service (non-functional and developer experience) requirements.</description>
    </item>
    
    <item>
      <title>‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§® ‡§ï‡§æ ‡§≠‡§æ‡§ó 9 - ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§Ø‡§Æ</title>
      <link>/hi/posts/panchayat-in-constitution/</link>
      <pubDate>Wed, 10 Mar 2021 22:21:33 +0000</pubDate>
      
      <guid>/hi/posts/panchayat-in-constitution/</guid>
      <description>‡§ó‡§æ‡§Å‡§ß‡•Ä ‡§ú‡•Ä ‡§®‡•á ‡§™‡§∞‡§ø‡§ï‡§≤‡•ç‡§™‡§®‡§æ ‡§ï‡•Ä ‡§•‡•Ä ‡§ó‡§æ‡§Å‡§µ‡•ã‡§Ç ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§≠‡•Ä ‡§è‡§ï ‡§≤‡•ã‡§ï‡§§‡§Ç‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§π‡•ã ‡§ú‡§π‡§æ‡§Å ‡§≤‡•ã‡§ó ‡§Ü‡§™‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§ú‡•Å‡§≤‡§ï‡§∞ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡•ç ‡§∏‡§æ‡§Æ‡§ú‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞‡•á‡§Ç | ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç ‡§á‡§∏ ‡§¨‡§æ‡§§ ‡§ï‡•Ä ‡§≠‡•Ä ‡§¨‡§ï‡§æ‡§≤‡§§ ‡§ï‡•Ä ‡§•‡•Ä ‡§ï‡§ø ‡•õ‡§Æ‡•Ä‡§®‡•Ä ‡§∏‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§è‡§ï ‡§ê‡§∏‡§æ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§≤‡•ã‡§ï‡§§‡§Ç‡§§‡•ç‡§∞ ‡§ñ‡•ú‡§æ ‡§π‡•ã ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•Ä ‡§≠‡§æ‡§ó‡•á‡§¶‡§æ‡§∞‡•Ä ‡§π‡•ã | ‡§ú‡•ã ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡•Ä‡§Ø ‡§≤‡•ã‡§ï‡§§‡§Ç‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§≠‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§µ‡§π‡§æ‡§Ç ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ö‡•Å‡§®‡•á ‡§π‡•Å‡§è ‡§≤‡•ã‡§ó ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§ï‡•Ä ‡§Ü‡§µ‡§æ‡•õ ‡§µ‡§π‡§æ‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§™‡§π‡•Å‡§Å‡§ö‡§§‡•Ä | ‡§ï‡§ø‡§®‡•ç‡§§‡•Å ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§Ø‡§π ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§µ‡•ç ‡§Ö‡§µ‡§∏‡§∞ ‡§Æ‡§ø‡§≤‡§æ ‡§π‡•Å‡§Ü ‡§π‡•à ‡§ï‡§ø ‡§µ‡§π ‡§Ö‡§™‡§®‡•Ä ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡§≠‡§æ ‡§ï‡•Ä ‡§¨‡•à‡§†‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§ï‡•á ‡§∏‡§æ‡§Æ‡§®‡•á ‡§Ö‡§™‡§®‡•Ä ‡§¨‡§æ‡§§ ‡§ï‡§π ‡§∏‡§ï‡•á |</description>
    </item>
    
    <item>
      <title>‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã MSP ‡§™‡§∞ ‡•ò‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Æ‡§ø‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?</title>
      <link>/hi/posts/why-msp-not-good/</link>
      <pubDate>Wed, 17 Feb 2021 22:07:39 +0000</pubDate>
      
      <guid>/hi/posts/why-msp-not-good/</guid>
      <description>‡§¨‡§æ‡§§ ‡§¨‡§π‡•Å‡§§ ‡§∏‡•Ä‡§ß‡•Ä ‡§π‡•à ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ú‡•ã ‡§Ö‡§®‡•ç‡§® ‡§â‡§ó‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§µ‡•ã ‡§ö‡§æ‡§π ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§ï‡•Å‡§õ ‡§ê‡§∏‡§æ ‡§π‡•ã ‡§ï‡§ø ‡§â‡§®‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§â‡§™‡§ú ‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§¶‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡•á | ‡§î‡§∞ MSP ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§ó ‡§ï‡§∞‡§ï‡•á ‡§µ‡•ã ‡§ê‡§∏‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§π‡•Ä ‡§è‡§ï ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§¶‡§æ‡§Æ ‡§™‡§∞ ‡§â‡§®‡§ï‡§æ ‡§Æ‡§æ‡§≤ ‡§ñ‡§∞‡•Ä‡§¶‡•á | ‡§Ö‡§¨ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§á‡§§‡§®‡•á ‡§Ö‡§®‡•ç‡§® ‡§ï‡•ã ‡§ñ‡§∞‡•Ä‡§¶‡§ï‡§∞ ‡§ï‡§∞‡•á‡§ó‡•Ä ‡§ï‡•ç‡§Ø‡§æ?
‡§Ö‡§¨ ‡§á‡§§‡§®‡•á ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§î‡§∞ ‡§ß‡§æ‡§® ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ö‡§≠‡•Ä ‡§∏‡§ø‡§∞‡•ç‡§´ ‡•¨ ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡§æ‡§ú ‡§π‡•Ä MSP ‡§™‡§∞ ‡§ñ‡§∞‡•Ä‡§¶‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ø‡§π 6 ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§π‡•Ä ‡§á‡§§‡§®‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§á‡§∏‡§ï‡•ã ‡§∞‡§ñ‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß FCI ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§π‡•à ‡§π‡•Ä ‡§®‡§π‡•Ä‡§Ç | ‡§Ö‡§®‡•ç‡§®‡§¶‡§æ‡§§‡§æ ‡§ï‡•á ‡§ï‡•ú‡•Ä ‡§Æ‡•á‡§π‡§®‡§§ ‡§∏‡•á ‡§â‡§ó‡§æ‡§Ø‡•á ‡§Ö‡§®‡•ç‡§® ‡§ï‡§æ ‡§è‡§ï ‡§¨‡•ú‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§ñ‡•Å‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•ú‡§§‡§æ ‡§π‡•à, ‡§ú‡§æ‡§®‡§µ‡§∞ ‡§ñ‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç FCI ‡§ï‡•ã ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§Ö‡§®‡§æ‡§ú ‡§Ü‡§®‡•á ‡§™‡•å‡§®‡•á ‡§¶‡§æ‡§Æ‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡•õ‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§ö‡§®‡§æ ‡§™‡•ú‡§§‡§æ ‡§π‡•à | ‡§Ö‡§¨ ‡§Ü‡§™ ‡§ï‡§π‡•á‡§Ç‡§ó‡•á ‡§ï‡§ø FCI ‡§ï‡•ã ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï ‡§≠‡§£‡•ç‡§°‡§æ‡§∞‡§£ ‡§ï‡§æ | ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§∞‡•á‡§Ç ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß ‡§ú‡§¨ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à | 41.</description>
    </item>
    
    <item>
      <title>Help</title>
      <link>/posts/help/</link>
      <pubDate>Sat, 03 Oct 2020 22:07:51 +0100</pubDate>
      
      <guid>/posts/help/</guid>
      <description>Useful Hugo commands hugo server
hugo new .\content\posts\page-name.md -D
Useful links https://www.markdownguide.org/cheat-sheet/ https://gist.github.com/rxaviers/7360908</description>
    </item>
    
    <item>
      <title>Keys to Success</title>
      <link>/posts/keys-to-success/</link>
      <pubDate>Tue, 14 Jul 2020 22:46:54 +0100</pubDate>
      
      <guid>/posts/keys-to-success/</guid>
      <description> Empathy Optimism Embrace ambiguity Make it Learn from failure Iterate, Iterate Creative Confidence  </description>
    </item>
    
  </channel>
</rss>
