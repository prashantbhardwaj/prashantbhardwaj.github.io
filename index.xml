<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prashant Bhardwaj</title>
    <link>/</link>
    <description>Recent content on Prashant Bhardwaj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>copyright@Prashant</copyright>
    <lastBuildDate>Sun, 11 Jun 2023 20:31:29 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Books to Read</title>
      <link>/posts/books-to-read/</link>
      <pubDate>Sun, 11 Jun 2023 20:31:29 +0100</pubDate>
      
      <guid>/posts/books-to-read/</guid>
      <description> Shreemad Bhagwat Gita  </description>
    </item>
    
    <item>
      <title>Best Road Trips in Scotland</title>
      <link>/posts/best-road-trips-in-scotland/</link>
      <pubDate>Sat, 25 Mar 2023 15:18:29 +0000</pubDate>
      
      <guid>/posts/best-road-trips-in-scotland/</guid>
      <description>Overview Scotland‚Äôs Best Six Driving Routes  Best Weekend Road Trips in Scotland  Scotland‚Äôs Most Scenic Driving Routes  Things you need to know before leaving for a Road Trip in Scotland Outdoor Activities  Overview Embark on an unforgettable journey through the breathtaking landscapes of Scotland with our curated list of the best road trips. From dramatic coastlines to rugged mountains and charming villages, Scotland offers a wealth of scenic routes that will leave you awe-inspired at every turn.</description>
    </item>
    
    <item>
      <title>Kafka Streams : Introduction</title>
      <link>/posts/kafka-streams-introduction/</link>
      <pubDate>Sat, 24 Dec 2022 23:18:23 +0000</pubDate>
      
      <guid>/posts/kafka-streams-introduction/</guid>
      <description>Stream is unbound flow of data (call it message, event or log).
  The Streams API of Apache Kafka¬Æ, available through a Java library, can be used to build highly scalable, elastic, fault-tolerant, distributed applications and microservices. First and foremost, the Kafka Streams API allows you to create real-time applications that power your core business. It is the easiest yet the most powerful technology to process data stored in Kafka.</description>
    </item>
    
    <item>
      <title>Introduction: AWS Certified Solutions Architect - Associate (WIP)</title>
      <link>/posts/introduction-aws-certified-solutions-architect-associate-wip/</link>
      <pubDate>Sun, 16 Oct 2022 21:19:45 +0100</pubDate>
      
      <guid>/posts/introduction-aws-certified-solutions-architect-associate-wip/</guid>
      <description>Exam structure  There are 65 questions within the exam and are multiple-choice requiring you to select either a single or multiple answers for each question The scoring is based out of 1000, with a minimum passing score of 720 (72%) You get 130 minutes to answer these questions.  The exam is split into 4 different domains that you will be assessed against, each carrying a different percentage weighting, these are identified as:</description>
    </item>
    
    <item>
      <title>Microservices : Service to Service Communications [Part 3]</title>
      <link>/posts/microservices-service-to-service-communications-part-3/</link>
      <pubDate>Tue, 04 Oct 2022 21:45:21 +0100</pubDate>
      
      <guid>/posts/microservices-service-to-service-communications-part-3/</guid>
      <description>Types of communication among microservices 1. Synchronous communication using REST 2. Asynchronous messaging  Types of communication among microservices In a microservices architecture, there are typically three types of communication patterns used for inter-service communication:
 Synchronous Asynchronous Data streaming [point to point]  1. Synchronous communication using REST 1.1 Handling failures  by using Circuit breaker pattern Network timeout if do not receive response within a configured timeout Limit the number of outstanding requests from a client to a target service   üëâ Pattern: Circuit Breaker.</description>
    </item>
    
    <item>
      <title>Microservices : Decomposition Strategies [Part 2]</title>
      <link>/posts/microservices-decomposition-strategies-part-2/</link>
      <pubDate>Mon, 03 Oct 2022 21:45:21 +0100</pubDate>
      
      <guid>/posts/microservices-decomposition-strategies-part-2/</guid>
      <description>Introduction In this blog post, we will explore the process of decomposing a monolithic application into microservices and the benefits it brings. We will discuss various strategies, best practices, and patterns involved in this architectural transformation.
Benefits of Decomposing Monoliths  Scalability: Microservices enable individual components to scale independently, allowing you to allocate resources efficiently based on specific needs. Agility and Faster Time-to-Market: Microservices enable teams to work independently, allowing for parallel development and deployment cycles, leading to quicker feature delivery.</description>
    </item>
    
    <item>
      <title>Microservices : Introduction [Part 1]</title>
      <link>/posts/microservices-introduction-part-1/</link>
      <pubDate>Mon, 03 Oct 2022 11:39:12 +0100</pubDate>
      
      <guid>/posts/microservices-introduction-part-1/</guid>
      <description>‚≠ê Microservice pattern is an architecture that functionally decomposes an application into a set of services. It doesn&amp;rsquo;t say anything about size. Each service has focused, cohesive set of responsibility.
 Characterstics of Microservice architecture  X, Y and Z-Axis Scalability of micro services (Michael Fisher&amp;rsquo;s book - The Art of Scalability (Addison-Wesley, 2015) - Scale cube) Microservices as a form of modularity Each service has its own database  How is this different from Service oriented architecture (SOA)?</description>
    </item>
    
    <item>
      <title>Monolith Architecture</title>
      <link>/posts/monolith-architecture/</link>
      <pubDate>Sun, 02 Oct 2022 21:42:56 +0100</pubDate>
      
      <guid>/posts/monolith-architecture/</guid>
      <description>Benefits of Monolith architecture  Simple to develop Easy to make radical changes Strightforward to test Strightforward to deploy Easy to scale  Issues with Monolith architecture  Development is Slow Path from commit to deployment is long and aduous Scaling is difficult delivering a reliable monolith is challenging locked into increasingly obslete technology stack  </description>
    </item>
    
    <item>
      <title>Software Architecture</title>
      <link>/posts/software-architecture/</link>
      <pubDate>Sat, 01 Oct 2022 22:37:40 +0100</pubDate>
      
      <guid>/posts/software-architecture/</guid>
      <description>Any software architecture of a computing system is the set of working components and relationsship between them. Exaple: Database, Message Broker, Server and an application running on that server.
 The 4+1 View Model Of Software Architecture More concretely, an application‚Äôs architecture can be viewed from multiple perspectives.
 üìö Phillip Krutchen: ‚ÄúArchitectural Blueprints‚ÄîThe ‚Äò4+1‚Äô View Model of Software Architecture‚Äù
  üîî A good architecture never enables you to satisfy your functional requirement, however it helps you to achieve the quality of service (non-functional and developer experience) requirements.</description>
    </item>
    
    <item>
      <title>‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§® ‡§ï‡§æ ‡§≠‡§æ‡§ó 9 - ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§Ø‡§Æ</title>
      <link>/hi/posts/panchayat-in-constitution/</link>
      <pubDate>Wed, 10 Mar 2021 22:21:33 +0000</pubDate>
      
      <guid>/hi/posts/panchayat-in-constitution/</guid>
      <description>‡§ó‡§æ‡§Å‡§ß‡•Ä ‡§ú‡•Ä ‡§®‡•á ‡§™‡§∞‡§ø‡§ï‡§≤‡•ç‡§™‡§®‡§æ ‡§ï‡•Ä ‡§•‡•Ä ‡§ó‡§æ‡§Å‡§µ‡•ã‡§Ç ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§≠‡•Ä ‡§è‡§ï ‡§≤‡•ã‡§ï‡§§‡§Ç‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§π‡•ã ‡§ú‡§π‡§æ‡§Å ‡§≤‡•ã‡§ó ‡§Ü‡§™‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§ú‡•Å‡§≤‡§ï‡§∞ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡•ç ‡§∏‡§æ‡§Æ‡§ú‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞‡•á‡§Ç | ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç ‡§á‡§∏ ‡§¨‡§æ‡§§ ‡§ï‡•Ä ‡§≠‡•Ä ‡§¨‡§ï‡§æ‡§≤‡§§ ‡§ï‡•Ä ‡§•‡•Ä ‡§ï‡§ø ‡•õ‡§Æ‡•Ä‡§®‡•Ä ‡§∏‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§è‡§ï ‡§ê‡§∏‡§æ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§≤‡•ã‡§ï‡§§‡§Ç‡§§‡•ç‡§∞ ‡§ñ‡•ú‡§æ ‡§π‡•ã ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•Ä ‡§≠‡§æ‡§ó‡•á‡§¶‡§æ‡§∞‡•Ä ‡§π‡•ã | ‡§ú‡•ã ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡•Ä‡§Ø ‡§≤‡•ã‡§ï‡§§‡§Ç‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§≠‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§µ‡§π‡§æ‡§Ç ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ö‡•Å‡§®‡•á ‡§π‡•Å‡§è ‡§≤‡•ã‡§ó ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§ï‡•Ä ‡§Ü‡§µ‡§æ‡•õ ‡§µ‡§π‡§æ‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§™‡§π‡•Å‡§Å‡§ö‡§§‡•Ä | ‡§ï‡§ø‡§®‡•ç‡§§‡•Å ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§Ø‡§π ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§µ‡•ç ‡§Ö‡§µ‡§∏‡§∞ ‡§Æ‡§ø‡§≤‡§æ ‡§π‡•Å‡§Ü ‡§π‡•à ‡§ï‡§ø ‡§µ‡§π ‡§Ö‡§™‡§®‡•Ä ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡§≠‡§æ ‡§ï‡•Ä ‡§¨‡•à‡§†‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§ï‡•á ‡§∏‡§æ‡§Æ‡§®‡•á ‡§Ö‡§™‡§®‡•Ä ‡§¨‡§æ‡§§ ‡§ï‡§π ‡§∏‡§ï‡•á |</description>
    </item>
    
  </channel>
</rss>
