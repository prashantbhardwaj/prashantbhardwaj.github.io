<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kafka on Prashant Bhardwaj</title>
    <link>/tags/kafka/</link>
    <description>Recent content in kafka on Prashant Bhardwaj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>copyright@Prashant</copyright>
    <lastBuildDate>Sat, 24 Dec 2022 23:18:23 +0000</lastBuildDate><atom:link href="/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka Streams - WIP</title>
      <link>/posts/kafka-streams-wip/</link>
      <pubDate>Sat, 24 Dec 2022 23:18:23 +0000</pubDate>
      
      <guid>/posts/kafka-streams-wip/</guid>
      <description>If any team is using Kafka as a message broker or event sourcing system or change logs or commit log; no matter what your use case is, you must be having producers and consumers. Now at the consumer side, to process the event stream, you&amp;rsquo;ll be having one of following 2 systems -
 Microservices using Kafka&amp;rsquo;s Producer and Consumer API, procssing one message at a time Full fledged stream processing applications using Streaming framework as explained just above.</description>
    </item>
    
    <item>
      <title>Jms to Kafka Bridge</title>
      <link>/posts/jms-to-kafka-bridge/</link>
      <pubDate>Mon, 06 Jul 2020 23:07:49 +0100</pubDate>
      
      <guid>/posts/jms-to-kafka-bridge/</guid>
      <description>Often we integrate two systems where one system is emitting events on some jms solution while another is listening a kafka topic and expecting source messages on kafka. In such cases, we write a bridge application which reads data from jms and writes on kafka.
This bridge application should satisfy following requirements -
 It should send messages on kafka without breaking the sequence of message. If jms broker goes down, it should keep trying to connect to that and whenever broker starts, application should reconnect and should start listening messages.</description>
    </item>
    
  </channel>
</rss>
