<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Prashant Bhardwaj</title>
    <link>/tags/java/</link>
    <description>Recent content in java on Prashant Bhardwaj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>copyright@Prashant</copyright>
    <lastBuildDate>Sat, 24 Dec 2022 23:18:23 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka Streams - WIP</title>
      <link>/posts/kafka-streams-wip/</link>
      <pubDate>Sat, 24 Dec 2022 23:18:23 +0000</pubDate>
      
      <guid>/posts/kafka-streams-wip/</guid>
      <description>Stream is unbound flow of data (call it message, event or log).
  The Streams API of Apache KafkaÂ®, available through a Java library, can be used to build highly scalable, elastic, fault-tolerant, distributed applications and microservices. First and foremost, the Kafka Streams API allows you to create real-time applications that power your core business. It is the easiest yet the most powerful technology to process data stored in Kafka.</description>
    </item>
    
    <item>
      <title>Jms to Kafka Bridge</title>
      <link>/posts/jms-to-kafka-bridge/</link>
      <pubDate>Mon, 06 Jul 2020 23:07:49 +0100</pubDate>
      
      <guid>/posts/jms-to-kafka-bridge/</guid>
      <description>Often we integrate two systems where one system is emitting events on some jms solution while another is listening a kafka topic and expecting source messages on kafka. In such cases, we write a bridge application which reads data from jms and writes on kafka.
This bridge application should satisfy following requirements -
 It should send messages on kafka without breaking the sequence of message. If jms broker goes down, it should keep trying to connect to that and whenever broker starts, application should reconnect and should start listening messages.</description>
    </item>
    
  </channel>
</rss>
